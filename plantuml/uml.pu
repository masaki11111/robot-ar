@startuml robot-ar
title robot-ar
package Enemy{
    class EnemyCreation {
        --敵オブジェクト--
        + GameObject GreenMonster
        + GameObject SphereRobot
        + GameObject Gundam
        
        --敵の生成場所（４角に配置）--
        + Transform ImageTarget
        + Transform EnemyPoint1
        + Transform EnemyPoint2
        + Transform EnemyPoint3
        + Transform EnemyPoint4

        --スタートボタンを押したらタイマーを表示--
        + GameObject Timer
        
        --敵の数を管理（増加）する時の数--
        + int EnemyNumManagementPoint

        --敵生成--
        + void CreateEnemy()

        --スタートボタン押下時の敵生成--
        + void CreateEnemyForFirstTime()

    }
    note right
    敵生成
    end note
    
    class EnemyManager {
        - string name
        - GameObject target
        - NavMeshAgent agent
        - AudioSource Walk
    }
    note right
    敵の移動管理
    end note

}

package Player{

    class PlayerMover{
        + float speed
        - Vector3 latestPos
        + FixedJoystick joystick

    }
    note right
    プレイヤーの移動
    end note

    class LightAttackManager{
        + ButtonState buttonA
        - GameObject Flame
        - ParticleSystem FlameThrower
        - BoxCollider FlameCollider
        - float FlameLength
        - float FlamePosition
        + AudioSource FlameAudio

    }
    note right
    プレイヤーの小攻撃管理
    end note

    class BulletManager{
        + GameObject bullet
        + Transform muzzle
        + ButtonState buttonA
    }
    note right
    プレイヤーの弾攻撃
    end note

    class BulletMover{
        + float speed
    }
    note right
    弾の移動
    end note

    class SuperAttackManager{
        + ButtonState buttonB
        - GameObject Earth
        --大攻撃ができるまでのポイント管理--
        - int superAttackPoint

        --エフェクト本体--
        - ParticleSystem EarthShatter1
        - ParticleSystem EarthShatter2
        - ParticleSystem EarthShatter3
        - ParticleSystem EarthShatter4
        - ParticleSystem EarthShatter5
        - ParticleSystem EarthShatter6
        - ParticleSystem EarthShatter7
        - ParticleSystem EarthShatter8
        - BoxCollider EarthCollider
        - float EarthLength
        + AudioSource superAttackAudio
        
        --カットイン--
        - Animator SuperAttackImageCutin
        - PostProcessVolume postProcessVolume
        - ColorGrading _colorGrading
        + float timeOut
        - float timeElapsed
        - bool waitforcutin
        - int count
        
        --大攻撃のボタン--
        + GameObject superAttackButton
        - GameObject superAttackTrigger
        + AudioSource superAttackButtonAudio
           
        - IEnumerator SuperAttack()
    }
    note right
    プレイヤーの大攻撃管理
    end note

    class EnemyHit{
        --攻撃が当たったときのダメージの数値--        
        - int point

        --ダメージが当たったときの効果音--
        + AudioSource Hit
        + AudioClip impact

        --敵の位置--
        - Vector3 EnemyPos
        - Vector3 HitPos

        --ダメージが当たったときのエフェクト--
        + GameObject HitParticleObject
        + Transform ImageTarget

        - void OnTriggerEnter()
    }
    note right
    ダメージ処理
    end note

    class PlayerHit{
    + bool PlayerHit
    - void OnTriggerEnter()
    + bool HitPlayer
    }
}
package UI{
    class ObtainedPointManager{
        + Text ObtainedPoint
        + int _ObtainedPoint
    }
    note right
    点数
    end note

    class DisplayMenu{
        - GameObject Menu
        isDisplay = true
        - bool isDisplay
        + void Togglemenu()
    }

    class Loading{
        非同期動作で使用する
        - AsyncOperation async
        シーンロード中に表示するUI画面
        - GameObject loadUI
        読み込み率を表示するスライダー
        - Slider slider

        バトルシーンへの遷移
        + void ToBattle()

        - IEnumerator LoadingBattle()

        + void ToLookingCharacter()

        - IEnumerator LoadingLookingCharacter()
        + void ToMenu()

        -IEnumerator LoadingMenu()
    }

    class ProgressBarCircle{
        + float TimeLimit
    }
    note left
    タイマーのUI
    end note

    class Timer{
        + GameObject Menu
        + AudioSource BattleAudio
        - Text ResultPoint
        + ButtonState StartButton
	    - bool startTimer
        + void RecoverTime()
        + void FinishGame()

    }
    note right
    タイマーとリザルト画面表示
    end note
}

package Vuforia{
    class  DefaultTrackableEventHandler{
        - void OnTrackingFound()
    }

    class PepperAppearanceAnimation{
        - bool pAppearanceLightSwitch
        - bool pAppearanceAnimationSwitch
        ParticleSystem pepperPresenceAnimation
        ペッパーが出たときの音
        + AudioSource pepperPresenceAudio
        + Material PepperMaterial
        + GameObject pepperColor
        + GameObject spotLight
        + GameObject pepperPresence
        pepperが出たときにマーカーをペッパーがいないのものに差し替える
        + GameObject PostGround
    }

}

PlayerHit -- Timer
note on link
OnTriggerEnterの時に
FinishGame()
end note


EnemyHit -- EnemyCreation
note on link
onTriggerEnter時に
通常の敵なら敵生成（CreateEnemy（））
end note

EnemyHit -- SuperAttackManager
note on link: SuperAttackPoint計算

EnemyHit -- ObtainedPointManager
note on link: 点数（_ObtainedPoint）参照

EnemyHit -- Timer
note on link
onTriggerEnter時に
メタルスライムなら
時間回復（RecoverTime()）
end note

Timer -- ObtainedPointManager
note on link
ゲーム終了時に_ObtaiondPoint参照
end note

Timer -- ProgressBarCircle
note on link
タイムが切れたら、
FinishGame()
end note

Timer -- EnemyCreation
note on link
スタートボタンを押した時に
CreateEnemyForFirstTime()
end note

DefaultTrackableEventHandler -- PepperAppearanceAnimation


@enduml